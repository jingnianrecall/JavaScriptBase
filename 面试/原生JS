1. 基本类型有哪几种？null 是对象吗？基本数据类型和复杂数据类型存储有什么区别？
基本数据类型有六种，分别是undefined null string bool number symbol(es6) bigint(es10)
null不是对象 虽然typeof null 输出object，但是null不是对象（js bug）
基本数据类型存储在栈内存中,存储的是值
复杂数据类型(object)存储在堆内存中，地址存在在栈内存，地址指向堆中的值。当我们把对象赋值给另外一个变量的
时候，复制的是地址，指向同一块内存空间，当其中一个对象改变时，另一个对象也会发生变化。

2. typeof 是否正确判断类型? instanceof呢？ instanceof 的实现原理是什么？
typeof可以正确判断基本数据类型,除了null,typeof null输出object。（typeof bigint 输出function）
但是对象来说，typeof不能正确判断其类型，typeof一个函数输出function,除此之外输出的都是object,
无法准确知道对象的类型。
instanceof通过原型链进行判断，A instanceof B,在A的原型链中层层查找,是否有原型等于B.prototype,
如果一直找到A原型链的顶端（null,即Object.prototype.__proto__）还是没找到，返回false 否则返回true

instanceof实现
function instanceof(L, R) {
    let prototype = R.prototype;
    while(true) {
        if(L === null) {
            return false;
        }
        else if(L.__proto__ === prototype) {
            return true;
        }
        L = L.__proto__;
    }
}


3. for of , for in 和 forEach,map 的区别。
for-of循环：主要用来遍历可迭代对象（具有iterator接口）
可使用范围包括数组、Set、Map结构,某些类数组对象 Generator对象、以及字符串
for-of主要是遍历属性值，可以中断循环
for-in循环：遍历对象自身和继承的可枚举属性（会遍历原型链）
适合遍历对象，遍历的是属性名，不能遍历属性值，可以中断循环
应用场景：调试，方便检查对象属性名。处理key-value数据时，检查任何键为何值。
forEach：只能遍历数组，不能中断
map：只能遍历数组，不能中断，返回值是修改后的数组
function pow(x) {
    return x * x;
}
var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
console.log(results);

Object.keys()：返回给定对象所有可枚举属性的字符串数组

4. 如何判断一个变量是不是数组？
使用 Array.isArray() 判断，如果返回true 说明是数组
使用 instanceof Array 判断，如果返回true 说明是数组
使用 Object.prototype.toString.call 判断，如果值是[object Array]说明是数组
function fn() {
    console.log(Array.isArray(arguments));  // false 因为arguments是类数组 不是数组
    console.log(Array.isArray([1,2,3,4]));  // true
    console.log(arguments instanceof Array);  // false
    console.log([1,2,3,4] instanceof Array);  //true
    console.log(Object.prototype.toString.call(arguments)) // [object, Arguments]
    console.log(Object.prototype.toString.call([1,2,3,4])) // [object, Array]
}
fn(1,2,3,4)

5. 类数组和数组的区别是什么？

类数组：
拥有length属性，其他属性（索引）为非负整数（对象中的索引会被当做字符串处理）